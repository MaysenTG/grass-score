exit
self.class
self
params
current_account
continue
params[:query]
@users
continue
next
rounds.empty?
continue
players.flat_map(&:game).uniq
players.flat_map(&:game).uniq.sort_by(&:sid)
players.flat_map(&:game)
continue
categories
players.count
player.game.rounds.joins(:scores).where(scores: { player_id: player.id })
player_scores(player)
categories
continue
next
updated_score_params
continue
params
continue
rounds.map { |round| calculate_total_score(player, round) }.sum
rounds.map { |round| calculate_total_score(player, round) }
player
[;auer
continue
contibue
categories
where
whereami
continue
next
step
next
score
next
score.unprotected_peddle * -0.2
score
continue
score
continue
score
continue
score
continue
score.banker_value
score
continue
score.banker_value
pre_mature_score + score.banker_value
continue
score
next
score.unprotected_peddle * -0.2
next
score.total_pre_banker_score <= 0
score.total_pre_banker_score
continue
next
continue
scores.exists?(banker: true)
score.banker_value
pre_mature_score
score
next
score
next
total_to_add_to_banker
continue
score.banker_value
pre_mature_score
next
banker
total_to_add_to_banker
continue
scores.find_by(banker: true)
score
next
score
next
continue
score.banker?
score
next
score
next
continue
score
continue
score
continue
score
continue
all_other_scores.where(banker: true).empty?
next
score
continue
scores.count
scores
next
continue
unprotected_peddle * -0.2
self
banker_score.present?
self.banker_value
next
continue
banker_score?
self.banker_value
next
continue
self.banker_value
self.banker_valu
self.banker_valur
next
continue
score
next
continue
banker_deductions_from_all_scores
next
self
-unprotected_peddle * 0.2
next
continue
scores.where.not(id: self.id).sum(&:unprotected_peddle)
scores.where.not(score: self).sum(&:unprotected_peddle)
self.id
scores.pluck(:unprotected_peddle)
scores.where.not(player_id: self.id).sum(&:unprotected_peddle)
 scores.where.not(player: self).sum(&:unprotected_peddle)
banker_deductions_from_all_scores
next
-unprotected_peddle * 0.2
next
continue
self
next
continue
banker_score
total_to_add_to_banker
next
step
banker_score
next
exit
banker_score
next
exit
round.finished
game.rounds.any? { |round| !round.finished? }
self
whereami
game.rounds.all? { |round| round.finished? }
exit
!!!
game.rounds.all? { |round| round.finished? }
continue
scores.first
seld.scores
scores
